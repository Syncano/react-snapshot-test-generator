#!/usr/bin/env node
'use strict';

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _functions = require('./functions');

var _functions2 = _interopRequireDefault(_functions);

var _templates = require('./templates');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var argv = _yargs2.default.usage('Usage: $0 [options]').example('$0', 'Generates tests with default options').alias('d', 'output-directory').nargs('d', 1).describe('d', 'Output directory').default('d', '__tests__').alias('o', 'output').nargs('o', 1).default('o', 'snapshotTests').describe('o', 'Name of the output module').alias('c', 'config').nargs('c', 1).describe('c', 'Name of the config module').default('c', 'snapshotTestConfig').help('help').alias('h', 'help').alias('n', 'native').describe('n', 'Use React Native').default('n', false).alias('nm', 'native-module').describe('nm', 'Name of React Native module').nargs('nm', 1).default('nm', 'react-native').argv;

var workingDirectory = process.cwd();
var configFilename = argv.config;
var configFilepath = workingDirectory + '/' + configFilename;

var configuration = void 0;
try {
  configuration = require(configFilepath);
} catch (error) {
  console.error(error);
  _yargs2.default.showHelp();
  process.exit(1);
}

var _configuration = configuration,
    autoMocks = _configuration.autoMocks,
    componentDefinitions = _configuration.componentDefinitions;


var describedComponents = (0, _functions2.default)(componentDefinitions, function (_ref) {
  var components = _ref.components;
  return components.map(function (comp) {
    return comp.props.map(function (props) {
      return (0, _templates.testDescription)(comp.name, (0, _functions.jsxProps)(props));
    }).join("\n");
  });
});

var componentImports = (0, _functions2.default)(componentDefinitions, function (_ref2) {
  var path = _ref2.path,
      components = _ref2.components;
  return components.map(function (comp) {
    return (0, _templates.componentImport)(path, comp.name);
  });
});

var comment = '/* Component tests generated by react-snapshot-test-generator on ' + new Date().toISOString() + ' */';

var reactNativeImport = argv.n ? 'import \'' + argv.nm + '\'' : "";
var generatedMocks = autoMocks ? (0, _functions.jestReactMocks)(autoMocks) : "";

var template = comment + '\n' + reactNativeImport + '\nimport React from \'react\';\nimport renderer from \'react-test-renderer\';\n\nfunction snapshotTest(element) {\n  const tree = renderer.create(element).toJSON();\n  expect(tree).toMatchSnapshot();\n}\n\n' + generatedMocks + '\n\n' + componentImports + '\n\n' + describedComponents + '\n';

var outputFile = argv.output;
var outputDir = argv['output-directory'];

if (!_fs2.default.existsSync(outputDir)) _fs2.default.mkdirSync(outputDir);
_fs2.default.writeFile(workingDirectory + '/' + outputDir + '/' + outputFile + '.js', template);